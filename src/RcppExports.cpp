// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cpprbinom
NumericVector cpprbinom(int n, double size, NumericVector prob);
RcppExport SEXP _episensr_cpprbinom(SEXP nSEXP, SEXP sizeSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(cpprbinom(n, size, prob));
    return rcpp_result_gen;
END_RCPP
}
// define_estar
List define_estar(int iter, NumericMatrix obs_mat, NumericVector draws);
RcppExport SEXP _episensr_define_estar(SEXP iterSEXP, SEXP obs_matSEXP, SEXP drawsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type obs_mat(obs_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type draws(drawsSEXP);
    rcpp_result_gen = Rcpp::wrap(define_estar(iter, obs_mat, draws));
    return rcpp_result_gen;
END_RCPP
}
// expo_adjOR
List expo_adjOR(int iter, NumericMatrix obs_mat, NumericMatrix draws, bool display_progress);
RcppExport SEXP _episensr_expo_adjOR(SEXP iterSEXP, SEXP obs_matSEXP, SEXP drawsSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type obs_mat(obs_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type draws(drawsSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(expo_adjOR(iter, obs_mat, draws, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// expo_adjRR
List expo_adjRR(int iter, NumericMatrix obs_mat, NumericMatrix draws, bool display_progress);
RcppExport SEXP _episensr_expo_adjRR(SEXP iterSEXP, SEXP obs_matSEXP, SEXP drawsSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type obs_mat(obs_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type draws(drawsSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(expo_adjRR(iter, obs_mat, draws, display_progress));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_episensr_cpprbinom", (DL_FUNC) &_episensr_cpprbinom, 3},
    {"_episensr_define_estar", (DL_FUNC) &_episensr_define_estar, 3},
    {"_episensr_expo_adjOR", (DL_FUNC) &_episensr_expo_adjOR, 4},
    {"_episensr_expo_adjRR", (DL_FUNC) &_episensr_expo_adjRR, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_episensr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
